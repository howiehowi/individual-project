import os
from ultralytics import YOLO
import torch
import shutil
from thop import profile


# 检查并创建结果保存文件夹
save_dir = 'results'
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

# 获取当前已有的文件数量，确定新的文件起始编号
existing_files = os.listdir(save_dir)
file_count = len(existing_files)

# 初始化模型
#model = YOLO('robocup_obb.pt')
model = YOLO('best.pt')

# 创建一个虚拟输入，大小和实际输入图像一致
input = torch.randn(1, 3, 480, 640).to(next(model.model.parameters()).device)

# 使用 thop 计算 FLOPs 和参数量
flops, params = profile(model.model, inputs=(input, ))

# 打印 FLOPs 和参数量
print(f"FLOPs: {flops / 1e9} GFLOPs")
print(f"Parameters: {params / 1e6} M")




# 进行检测
results = model('rgbImg.png', show=True, save=True)

# 获取保存的文件夹路径
runs_dir = 'runs/detect'
latest_run_dir = sorted([os.path.join(runs_dir, d) for d in os.listdir(runs_dir)], key=os.path.getmtime)[-1]

# 复制并重命名文件
for i, file_name in enumerate(os.listdir(latest_run_dir)):
    src_path = os.path.join(latest_run_dir, file_name)
    dst_path = os.path.join(save_dir, f'detected_image_{file_count + i + 1}.png')
    shutil.copy(src_path, dst_path)

# 获取检测结果的中心点和角度

#For normal bbox
for r in results:
    boxes = r.boxes.xyxy
    centers = [(float(x1 + x2) / 2, float(y1 + y2) / 2) for x1, y1, x2, y2 in boxes]

    #print(centers)



# 打印所有的中心点坐标
#print(centers)

